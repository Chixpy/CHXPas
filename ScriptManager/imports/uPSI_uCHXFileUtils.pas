unit uPSI_uCHXFileUtils;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_uCHXFileUtils = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_uCHXFileUtils(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_uCHXFileUtils_Routines(S: TPSExec);

procedure Register;

implementation


uses
   crc
  ,sha1
  ,FileUtil
  ,LazFileUtils
  ,LazUTF8
  ,uCHXStrUtils
  ,u7zWrapper
  ,uCHXFileUtils
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_uCHXFileUtils]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_uCHXFileUtils(CL: TPSPascalCompiler);
begin
  CL.AddTypeS('TItFolderObj', 'Function ( aFolder : string; FileInfo : TSearchR'
   +'ec) : boolean');
 CL.AddDelphiFunction('Function SearchFirstFileInFolderByExtCT( aFolder : string; Extensions : string) : string');
 CL.AddDelphiFunction('Function SearchFirstFileInFolderByExtSL( aFolder : string; Extensions : TStrings) : string');
 CL.AddDelphiFunction('Procedure Search7ZFilesByExt( AOutFolderList, AOutFileList : TStrings; aBaseFolder : string; aExtList : TStrings; Recursive : boolean)');
 CL.AddDelphiFunction('Function CRC32FileInt( const aFileName : string) : cardinal');
 CL.AddDelphiFunction('Function CRC32FileStr( const aFileName : string) : string');
 CL.AddDelphiFunction('Function SHA1FileStr( const aFileName : string) : string');
 CL.AddDelphiFunction('Function StringToSHA1Digest( aSHA1String : string) : TSHA1Digest');
 CL.AddDelphiFunction('Function IterateFolderObj( Folder : string; aFunction : TItFolderObj; Recursive : boolean) : boolean');
 CL.AddDelphiFunction('Function IterateFolderFun( Folder : string; aFunction : TItFolderFun; Recursive : boolean) : boolean');
 CL.AddDelphiFunction('Function FilesInFolder( Folder : string) : integer');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure RIRegister_uCHXFileUtils_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@SearchFirstFileInFolderByExtCT, 'SearchFirstFileInFolderByExtCT', cdRegister);
 S.RegisterDelphiFunction(@SearchFirstFileInFolderByExtSL, 'SearchFirstFileInFolderByExtSL', cdRegister);
 S.RegisterDelphiFunction(@Search7ZFilesByExt, 'Search7ZFilesByExt', cdRegister);
 S.RegisterDelphiFunction(@CRC32FileInt, 'CRC32FileInt', cdRegister);
 S.RegisterDelphiFunction(@CRC32FileStr, 'CRC32FileStr', cdRegister);
 S.RegisterDelphiFunction(@SHA1FileStr, 'SHA1FileStr', cdRegister);
 S.RegisterDelphiFunction(@StringToSHA1Digest, 'StringToSHA1Digest', cdRegister);
 S.RegisterDelphiFunction(@IterateFolderObj, 'IterateFolderObj', cdRegister);
 S.RegisterDelphiFunction(@IterateFolderFun, 'IterateFolderFun', cdRegister);
 S.RegisterDelphiFunction(@FilesInFolder, 'FilesInFolder', cdRegister);
end;

 
 
{ TPSImport_uCHXFileUtils }
(*----------------------------------------------------------------------------*)
procedure TPSImport_uCHXFileUtils.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_uCHXFileUtils(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_uCHXFileUtils.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_uCHXFileUtils(ri);
  RIRegister_uCHXFileUtils_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
